{"version":3,"sources":["images/unsplash.jpg","components/Home.js","components/Contact.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","src","unsplash","alt","class","Link","to","Contact","for","type","id","name","placeholder","value","About","App","BrowserRouter","Route","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sVC8BzBC,SAzBF,WACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAUC,IAAI,SAE1BN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQK,MAAM,qBAAoBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,YAAT,eAClCT,EAAAC,EAAAC,cAAA,UAAQK,MAAM,qBAAoBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,eAGtCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,iIAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGK,MAAM,uBACTP,EAAAC,EAAAC,cAAA,KAAGK,MAAM,oBAEXP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,iNCSOQ,SA9BC,WACZ,OACIV,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACPP,EAAAC,EAAAC,cAAA,YAEIF,EAAAC,EAAAC,cAAA,SAAOS,IAAI,SAAX,cACAX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOC,GAAG,QAAQC,KAAK,YAAYC,YAAY,gBAEvDf,EAAAC,EAAAC,cAAA,SAAOS,IAAI,SAAX,aACAX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOC,GAAG,QAAQC,KAAK,WAAWC,YAAY,qBAEtDf,EAAAC,EAAAC,cAAA,SAAOS,IAAI,WAAX,WACAX,EAAAC,EAAAC,cAAA,YAAUW,GAAG,UAAUC,KAAK,UAAUC,YAAY,sBAElDf,EAAAC,EAAAC,cAAA,SAAOU,KAAK,SAASI,MAAM,YAGnChB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,KACTT,EAAAC,EAAAC,cAAA,6BCRDe,SAVD,WAEV,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,KAAT,wBCcGS,0LAdX,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjCC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWb,IACxCV,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWN,aAP9BO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a003028e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unsplash.6dcc5d6f.jpg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport unsplash from '../images/unsplash.jpg';\r\nimport '../css/home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"wrapImage\">\r\n        <img src={unsplash} alt=\"img\" />\r\n      </div>\r\n      <div>\r\n        <div className=\"buttons\">\r\n          <button class=\"btn-hover color-2\"><Link to=\"/contact\">Contact me</Link></button>\r\n          <button class=\"btn-hover color-2\"><Link to=\"/about\">About me</Link></button>\r\n        </div>\r\n      </div>\r\n      <div className=\"wrapText\">\r\n        <h1>Welcome! My name is Marta. I'm a Front End developer working with JavaScript and React with experience in testing.</h1>\r\n      </div>\r\n      <div className=\"fabs\">\r\n        <i class=\"fab fa-linkedin-in\" />\r\n        <i class=\"fab fa-twitter\" />\r\n      </div>\r\n      <div className=\"intro\">\r\n        <h2>My passion dominates in coding because I like to create beautiful and efficient websites. Always keeping it clean and simple with added functionality whether it be in HTML, CSS or Javascript.</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/contact.css';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div class=\"container\">\r\n            <form>\r\n\r\n                <label for=\"fname\">First Name</label>\r\n                <input type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"Your name..\"/>\r\n\r\n                    <label for=\"lname\">Last Name</label>\r\n                    <input type=\"text\" id=\"lname\" name=\"lastname\" placeholder=\"Your last name..\" />\r\n\r\n                        <label for=\"subject\">Subject</label>\r\n                        <textarea id=\"subject\" name=\"subject\" placeholder=\"Write something..\"></textarea>\r\n\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n\r\n                </form>\r\n                <Link to=\"/\">\r\n                <p>Back to Home</p>\r\n                </Link>\r\n            </div>\r\n            \r\n\r\n\r\n                );\r\n            };\r\n            \r\n            \r\n            \r\n            \r\nexport default Contact;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/about.css';\r\n\r\nconst About = () => {\r\n\r\n    return (\r\n        <div className=\"cont\">\r\n            <h1>Oops this page seems not available yet!</h1>\r\n            <Link to=\"/\">Back to Home page</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as HashRouter, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport About from './components/About';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/contact\" exact component={Contact} />\n          <Route path=\"/about\" exact component={About} />\n\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}